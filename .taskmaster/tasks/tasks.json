{
  "tasks": [
    {
      "id": 1,
      "title": "构建 MCP 服务器基础架构与环境配置",
      "description": "建立基于 FastMCP 的服务器基础架构，配置 TypeScript 开发环境，设置数据验证模式和 API 客户端基础设施",
      "details": "1. 初始化 Node.js 项目并配置 TypeScript 环境\n2. 安装核心依赖：FastMCP、Zod、tws-auth、dotenv\n3. 创建 MCP 服务器实例并配置基本设置\n4. 实现 TbMCPServer 类封装 FastMCP 服务器\n5. 配置环境变量管理（API 密钥、服务端点等）\n6. 创建通用的 API 客户端基础类，集成 tws-auth 认证\n7. 实现 promise2ExecContent 工具函数，用于将 API 响应转换为 MCP ContentResult 格式\n8. 配置 ESLint 代码规范和项目结构\n9. 创建基础的错误处理和日志记录机制",
      "testStrategy": "1. 单元测试：验证 MCP 服务器初始化和配置正确性\n2. 集成测试：测试与 tws-auth 的认证集成\n3. 环境测试：验证不同环境配置的正确加载\n4. 错误处理测试：验证异常情况下的服务器稳定性",
      "priority": "high",
      "dependencies": [],
      "status": "done",
      "subtasks": [
        {
          "id": 1,
          "title": "TypeScript 开发环境配置",
          "description": "初始化 Node.js/TypeScript 项目，安装核心依赖，配置 TypeScript 编译选项",
          "status": "done"
        },
        {
          "id": 2,
          "title": "MCP 服务器实例创建",
          "description": "创建 MCP 服务器实例，配置基本设置，实现 TbMCPServer 类",
          "status": "done"
        },
        {
          "id": 3,
          "title": "API 客户端基础设施",
          "description": "创建通用的 API 客户端基础类，集成 tws-auth 认证，实现响应转换",
          "status": "done"
        },
        {
          "id": 4,
          "title": "错误处理和日志记录",
          "description": "创建基础的错误处理和日志记录机制，确保服务稳定性",
          "status": "done"
        }
      ]
    },
    {
      "id": 2,
      "title": "实现用户模块 MCP 工具集",
      "description": "开发用户相关的 MCP 工具，包括根据邮箱获取用户 ID、根据用户 ID 获取用户信息等功能，实现完整的用户信息查询服务",
      "details": "1. 定义用户相关的 Zod 数据模式：\n   - HeaderSchema（通用请求头模式，包含租户ID和租户类型）\n   - GetUserIdByEmailSchema（邮箱查询用户 ID 参数）\n   - GetUserInfoByUidSchema（用户 ID 查询信息参数）\n   - GetUserInfoByEmailSchema（邮箱查询用户信息参数）\n   - GetUserThirdAccountInfoSchema（三方账号信息查询参数）\n   - GetUserPreferencesSchema（用户设置查询参数）\n   - GetUserByUniqueFieldSchema（唯一字段查询用户参数）\n   - QueryIdMapSchema（IDMap查询参数）\n   - BatchQueryUserSchema（批量查询用户参数）\n   - CheckUserAppExistsSchema（批量查询用户应用可见性参数）\n   - UserIdSchema（用户 ID 响应格式）\n   - UserInfoSchema（用户信息响应格式）\n   - UserDetailSchema（用户详细信息响应格式）\n   - UserThirdAccountSchema（三方账号信息响应格式）\n   - UserPreferencesSchema（用户设置响应格式）\n   - UserUniqueFieldInfoSchema（唯一字段查询响应格式）\n   - IdMapSchema（IDMap查询响应格式）\n   - BatchUserInfoSchema（批量用户信息响应格式）\n   - UserAppExistsSchema（用户应用可见性响应格式）\n2. 实现用户 API 调用函数：\n   - getUserIdByEmail()：调用 /gateway/user/getid 接口\n   - getUserInfoByUid()：调用 /gateway/user/info 接口\n   - getUserInfoByEmail()：调用 /gateway/user/query 接口\n   - batchQueryUserInfo()：调用 /gateway/user/batchQuery 接口\n   - getUserThirdAccountInfo()：调用 /gateway/user/thirdAccount/info 接口\n   - getUserPreferences()：调用 /gateway/user/preferences 接口\n   - getUserByUniqueField()：调用 /gateway/user/info/byUniqueField 接口\n   - queryIdMap()：调用 /gateway/idmap/query 接口\n   - checkUserAppExists()：调用 /gateway/user/app/exists 接口\n   - createApiRequest()：创建统一的API请求函数，处理请求头、超时等\n   - handleApiResponse()：统一处理API响应，包括错误处理和数据转换\n3. 开发 MCP 工具：\n   - getUserUid：根据邮箱获取用户 ID\n   - getUserInfoByUid：根据用户 ID 获取用户信息\n   - getUserInfoByEmail：根据邮箱获取用户信息\n   - batchQueryUser：批量查询用户信息\n   - getUserThirdAccountInfo：获取三方账号信息\n   - getUserPreferences：获取用户设置\n   - getUserByUniqueField：根据唯一字段查询用户\n   - queryIdMap：查询用户IDMap信息\n   - checkUserAppExists：检查用户应用可见性\n4. 实现模块化注册函数：\n   - registerUserBasicTools()：注册基本用户信息查询工具\n   - registerUserExtendedTools()：注册用户扩展信息工具\n   - registerUserRelationTools()：注册用户关联信息工具\n   - registerUserTools()：统一注册所有用户工具\n5. 添加参数验证、错误处理和超时控制（10秒）\n6. 实现接口选择逻辑，根据参数类型选择合适的 API 端点",
      "testStrategy": "1. 单元测试：验证所有 Zod 模式的参数验证\n2. API 测试：模拟用户 API 的各种响应场景\n3. 工具测试：测试每个用户工具的功能完整性\n4. 错误处理测试：验证无效邮箱、不存在用户 ID 等异常情况\n5. 性能测试：确保用户信息查询响应时间在 300ms 以内",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "done",
      "subtasks": [
        {
          "id": 1,
          "title": "用户数据模式定义",
          "description": "定义用户信息的数据结构和模式，包括用户ID、邮箱、姓名等字段",
          "status": "done"
        },
        {
          "id": 2,
          "title": "用户API调用实现",
          "description": "实现用户信息查询的API接口，包括通过邮箱获取用户ID、通过ID获取用户信息等功能",
          "status": "done"
        },
        {
          "id": 3,
          "title": "MCP工具开发",
          "description": "开发基于MCP协议的用户信息查询工具，实现与外部系统的标准化交互",
          "status": "done"
        },
        {
          "id": 4,
          "title": "用户模块集成注册",
          "description": "将开发完成的用户模块注册到系统中，完成模块集成和功能测试",
          "status": "done"
        }
      ]
    },
    {
      "id": 3,
      "title": "实现任务模块 MCP 工具集",
      "description": "开发任务管理相关的 MCP 工具，包括任务查询、创建、更新、删除和评论功能，提供完整的任务生命周期管理能力",
      "details": "1. 定义任务相关的 Zod 数据模式：\n   - HeaderSchema（通用请求头模式，包含租户ID和租户类型）\n   - TaskSchema（任务对象结构）\n   - QueryTaskSchema（任务查询参数）\n   - QueryTaskByShortIdsSchema（通过短ID查询任务参数）\n   - QueryTaskByParentSchema（通过父任务查询参数）\n   - CreateTaskSchema（任务创建参数）\n   - UpdateTaskContentSchema（更新任务标题参数）\n   - UpdateTaskNoteSchema（更新任务备注参数）\n   - UpdateTaskExecutorSchema（更新任务执行者参数）\n   - UpdateTaskInvolveMembersSchema（更新任务参与者参数）\n   - UpdateTaskDueDateSchema（更新任务截止时间参数）\n   - UpdateTaskStartDateSchema（更新任务开始时间参数）\n   - UpdateTaskPrioritySchema（更新任务优先级参数）\n   - UpdateTaskTagsSchema（更新任务标签参数）\n   - UpdateTaskStatusSchema（更新任务状态参数）\n   - UpdateTaskProgressSchema（更新任务进度参数）\n   - UpdateTaskStoryPointSchema（更新任务StoryPoint参数）\n   - UpdateTaskSprintSchema（更新任务迭代参数）\n   - UpdateTaskParentSchema（更新任务父任务参数）\n   - UpdateTaskVisibleSchema（更新任务可见性参数）\n   - UpdateTaskStageSchema（更新任务列表参数）\n   - UpdateTaskSfcSchema（更新任务类型参数）\n   - CopyTaskSchema（复制任务参数）\n   - MoveTaskSchema（移动任务参数）\n   - CommentTaskSchema（评论任务参数）\n   - ArchiveTaskSchema（归档任务参数）\n   - DeleteTaskSchema（删除任务参数）\n   - SearchTaskSchema（搜索任务参数）\n   - AccessPolicyUpdateSchema（更新任务锁定动作参数）\n   - TaskResponseSchema（任务响应格式）\n   - TaskListResponseSchema（任务列表响应格式）\n   - TaskStatusListResponseSchema（任务状态列表响应格式）\n   - TaskCommentResponseSchema（任务评论响应格式）\n   - TaskSearchResponseSchema（任务搜索响应格式）\n   - TaskRtfRenderResponseSchema（任务富文本渲染响应格式）\n   - SimpleResponseSchema（简单操作响应格式）\n2. 实现任务 API 调用函数：\n   - queryTask()：调用 /gateway/v3/task/query 接口查询任务详情\n   - queryAllTask()：调用 /gateway/all-task/query 接口查询自由任务和项目任务\n   - createTask()：调用 /gateway/v3/task/create 接口创建新任务\n   - updateTaskContent()：调用 /gateway/v3/task/{taskId}/content 接口更新任务标题\n   - updateTaskNote()：调用 /gateway/v3/task/{taskId}/note 接口更新任务备注\n   - updateTaskExecutor()：调用 /gateway/v3/task/{taskId}/executor 接口更新任务执行者\n   - updateTaskInvolveMembers()：调用 /gateway/v3/task/{taskId}/involveMembers 接口更新任务参与者\n   - updateTaskDueDate()：调用 /gateway/v3/task/{taskId}/dueDate 接口更新任务截止时间\n   - updateTaskStartDate()：调用 /gateway/v3/task/{taskId}/startDate 接口更新任务开始时间\n   - updateTaskPriority()：调用 /gateway/v3/task/{taskId}/priority 接口更新任务优先级\n   - updateTaskTags()：调用 /gateway/v3/task/{taskId}/tag 接口更新任务标签\n   - updateTaskStatus()：调用 /gateway/v3/task/{taskId}/taskflowstatus 接口更新任务状态\n   - updateTaskProgress()：调用 /gateway/v3/task/{taskId}/progress 接口更新任务进度\n   - updateTaskStoryPoint()：调用 /gateway/v3/task/{taskId}/storyPoint 接口更新任务StoryPoint\n   - updateTaskSprint()：调用 /gateway/v3/task/{taskId}/sprint 接口更新任务迭代\n   - updateTaskParent()：调用 /gateway/v3/task/{taskId}/parent 接口更新任务父任务\n   - updateTaskVisible()：调用 /gateway/v3/task/{taskId}/visible/update 接口更新任务可见性\n   - updateTaskStage()：调用 /gateway/v3/task/{taskId}/stage/update 接口更新任务列表\n   - updateTaskSfc()：调用 /gateway/v3/task/{taskId}/sfc/update 接口更新任务类型\n   - copyTask()：调用 /gateway/v3/task/{taskId}/copy 接口复制任务\n   - moveTask()：调用 /gateway/v3/task/{taskId}/move 接口移动任务\n   - commentTask()：调用 /gateway/v3/task/{taskId}/comment 接口评论任务\n   - archiveTask()：调用 /gateway/v3/task/{taskId}/archive 接口归档任务\n   - deleteTask()：调用 /gateway/v3/task/{taskId}/delete 接口删除任务\n   - searchTask()：调用 /gateway/all-task/search 接口搜索任务\n   - getTaskFlowStatus()：调用 /gateway/v3/task/{taskId}/flow-tfs 接口获取任务状态列表\n   - renderTaskRtf()：调用 /gateway/v3/task/rtf/render 接口渲染任务富文本\n   - updateTaskAccessPolicy()：调用 /gateway/v3/task/{taskId}/access-policy/update 接口更新任务锁定动作\n   - createApiRequest()：创建统一的API请求函数，处理请求头、超时等\n   - handleApiResponse()：统一处理API响应，包括错误处理和数据转换\n3. 开发 MCP 工具：\n   - queryTask：查询任务详情，支持通过任务 ID、短 ID 或父任务 ID 查询\n   - queryAllTask：查询自由任务和项目任务\n   - createTask：创建任务，支持设置执行者、参与者、优先级等\n   - updateTaskContent：更新任务标题\n   - updateTaskNote：更新任务备注\n   - updateTaskExecutor：更新任务执行者\n   - updateTaskInvolveMembers：更新任务参与者\n   - updateTaskDueDate：更新任务截止时间\n   - updateTaskStartDate：更新任务开始时间\n   - updateTaskPriority：更新任务优先级\n   - updateTaskTags：更新任务标签\n   - updateTaskStatus：更新任务状态\n   - updateTaskProgress：更新任务进度\n   - updateTaskStoryPoint：更新任务StoryPoint\n   - updateTaskSprint：更新任务迭代\n   - updateTaskParent：更新任务父任务\n   - updateTaskVisible：更新任务可见性\n   - updateTaskStage：更新任务列表\n   - updateTaskSfc：更新任务类型\n   - copyTask：复制任务\n   - moveTask：移动任务\n   - commentTask：评论任务\n   - archiveTask：归档任务\n   - deleteTask：删除任务\n   - searchTask：搜索任务\n   - getTaskFlowStatus：获取任务状态列表\n   - renderTaskRtf：渲染任务富文本\n   - updateTaskAccessPolicy：更新任务锁定动作\n4. 实现模块化注册函数：\n   - registerTaskQueryTools()：注册任务查询相关工具\n   - registerTaskCreateTools()：注册任务创建相关工具\n   - registerTaskUpdateTools()：注册任务更新相关工具\n   - registerTaskManageTools()：注册任务管理相关工具\n   - registerTaskTools()：统一注册所有任务工具\n5. 优化查询参数处理，移除空值和转换特殊条件\n6. 添加超时控制（10秒）和完善的错误处理机制",
      "testStrategy": "1. 单元测试：验证所有 Zod 模式的参数验证\n2. API 测试：模拟任务相关接口的各种响应场景\n3. 工具测试：测试每个任务工具的功能完整性\n4. 业务测试：验证任务创建到删除的完整流程\n5. 并发测试：测试任务更新的并发处理能力\n6. 性能测试：确保任务操作响应时间在 300ms 以内",
      "priority": "high",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": [
        {
          "id": 1,
          "title": "任务数据模式定义",
          "description": "定义任务信息的数据结构和模式，包括任务实体、字段类型、验证规则等",
          "details": "创建任务数据模型，定义任务ID、标题、描述、状态、优先级、截止日期等核心字段，设置数据验证规则和约束条件，确保数据一致性和完整性。实现通用请求头模式、各类参数模式和响应模式，覆盖所有任务相关API的数据结构，包括任务查询、创建、更新、删除和评论等操作的请求和响应格式。",
          "status": "pending"
        },
        {
          "id": 2,
          "title": "任务API调用实现",
          "description": "实现任务信息查询的API接口，包括单个任务查询、批量查询和条件筛选功能",
          "details": "基于定义的数据模式实现任务相关的API调用函数，包括任务查询、创建、更新、删除和评论等功能。实现统一的API请求构建和响应处理机制，确保错误处理和超时控制的一致性。支持所有任务生命周期相关的操作，包括任务属性更新、状态变更、关系管理和搜索等功能，确保API调用的可靠性和稳定性。",
          "status": "pending"
        },
        {
          "id": 3,
          "title": "MCP工具开发",
          "description": "开发基于MCP协议的任务查询工具，实现与外部系统的标准化交互",
          "details": "创建MCP工具类，实现任务查询的标准化接口，包括工具注册、参数解析、结果转换等功能，确保与MCP协议的兼容性。针对每个API接口开发对应的MCP工具，提供统一的参数验证、错误处理和结果格式化。实现完整的任务生命周期管理能力，包括任务创建、查询、更新、删除和评论等功能，确保工具的易用性和可靠性。",
          "status": "pending"
        },
        {
          "id": 4,
          "title": "任务模块集成注册",
          "description": "将开发完成的任务模块注册到系统中，完成模块集成和功能测试",
          "details": "在系统中注册任务模块和MCP工具，配置路由和中间件，进行端到端测试，验证任务信息查询功能的完整性和可靠性。实现模块化的工具注册机制，按照功能域分类注册工具，提高代码组织性和可维护性。完成所有工具的集成测试，确保在各种场景下的正确运行，包括异常处理和边界情况测试。",
          "status": "pending"
        }
      ]
    },
    {
      "id": 4,
      "title": "实现组织模块 MCP 工具集",
      "description": "开发组织相关的 MCP 工具，包括组织信息查询、成员管理和权限控制功能",
      "details": "1. 定义组织相关的 Zod 数据模式\n2. 实现组织 API 调用函数\n3. 开发 MCP 工具\n4. 实现 registerOrgTools() 函数，统一注册所有组织工具\n5. 添加参数验证、错误处理和超时控制",
      "testStrategy": "1. 单元测试：验证所有 Zod 模式的参数验证\n2. API 测试：模拟组织 API 的各种响应场景\n3. 工具测试：测试每个组织工具的功能完整性\n4. 错误处理测试：验证无效组织 ID 等异常情况\n5. 性能测试：确保组织信息查询响应时间在 300ms 以内",
      "priority": "medium",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 5,
      "title": "实现项目模块 MCP 工具集",
      "description": "开发项目管理相关的 MCP 工具，包括项目信息查询、成员管理和配置控制功能",
      "details": "1. 定义项目相关的 Zod 数据模式\n2. 实现项目 API 调用函数\n3. 开发 MCP 工具\n4. 实现 registerProjectTools() 函数，统一注册所有项目工具\n5. 添加参数验证、错误处理和超时控制",
      "testStrategy": "1. 单元测试：验证所有 Zod 模式的参数验证\n2. API 测试：模拟项目 API 的各种响应场景\n3. 工具测试：测试每个项目工具的功能完整性\n4. 错误处理测试：验证无效项目 ID 等异常情况\n5. 性能测试：确保项目信息查询响应时间在 300ms 以内",
      "priority": "medium",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 6,
      "title": "实现事件模块 MCP 工具集",
      "description": "开发事件相关的 MCP 工具，包括事件查询、创建和更新功能",
      "details": "1. 定义事件相关的 Zod 数据模式\n2. 实现事件 API 调用函数\n3. 开发 MCP 工具\n4. 实现 registerEventTools() 函数，统一注册所有事件工具\n5. 添加参数验证、错误处理和超时控制",
      "testStrategy": "1. 单元测试：验证所有 Zod 模式的参数验证\n2. API 测试：模拟事件 API 的各种响应场景\n3. 工具测试：测试每个事件工具的功能完整性\n4. 错误处理测试：验证无效事件 ID 等异常情况\n5. 性能测试：确保事件信息查询响应时间在 300ms 以内",
      "priority": "low",
      "dependencies": [
        1
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 7,
      "title": "实现集成测试和性能优化",
      "description": "对所有已实现的 MCP 工具进行集成测试，并进行性能优化",
      "details": "1. 创建端到端测试场景，覆盖所有 MCP 工具\n2. 实现负载测试和压力测试\n3. 优化响应时间和资源使用\n4. 实现缓存机制，减少重复请求\n5. 优化错误处理和重试策略",
      "testStrategy": "1. 集成测试：验证所有 MCP 工具的协同工作\n2. 性能测试：测量响应时间和资源使用\n3. 负载测试：验证系统在高负载下的稳定性\n4. 缓存测试：验证缓存机制的有效性\n5. 错误恢复测试：验证系统在错误情况下的恢复能力",
      "priority": "medium",
      "dependencies": [
        2,
        3,
        4,
        5,
        6
      ],
      "status": "pending",
      "subtasks": []
    },
    {
      "id": 8,
      "title": "部署和监控系统实现",
      "description": "实现 MCP 服务的部署流程和监控系统",
      "details": "1. 创建 Docker 容器化部署配置\n2. 实现 CI/CD 流程\n3. 配置日志收集和分析\n4. 实现健康检查和告警机制\n5. 创建性能监控面板",
      "testStrategy": "1. 部署测试：验证部署流程的自动化和可靠性\n2. 监控测试：验证监控系统的有效性\n3. 故障恢复测试：验证系统在故障情况下的恢复能力\n4. 扩展性测试：验证系统在扩展时的稳定性\n5. 安全测试：验证系统的安全性和隔离性",
      "priority": "low",
      "dependencies": [
        7
      ],
      "status": "pending",
      "subtasks": []
    }
  ]
}
